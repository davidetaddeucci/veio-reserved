@page "/signin"
@using Hybrid.Veio.Web.Reserved.Shared.Partials.General
@using Hybrid.Veio.Web.Reserved.Services
@using Hybrid.Veio.Names.Models
@inject IJSRuntime JS
@inject IAuthenticationService AuthService
@inject NavigationManager NavigationManager

<script suppress-error="BL9992" src='@KTTheme.GetAssetPath("js/custom/authentication/sign-in/general.js")'></script>

<form class="form w-100" @onsubmit="@HandleLoginAsync" @onsubmit:preventDefault>
    <div class="text-center mb-11">
        <h1 class="text-gray-900 mb-3">
            Veio AI Park
        </h1>
    </div>

    <div class="separator separator-content my-14">
        <span class="w-125px text-gray-500 fw-semibold fs-7">Login</span>
    </div>

    <div class="fv-row mb-8">
        <input type="text"
               placeholder="Email"
               class="form-control bg-transparent"
               @bind="loginRequest.Username"
               @bind:event="oninput"
               @onkeypress="@(async (e) => { if (e.Key == "Enter") { await HandleLoginAsync(); }})" />
    </div>

    <div class="fv-row mb-3">
        <input type="password"
               placeholder="Password"
               class="form-control bg-transparent"
               @bind="loginRequest.Password"
               @bind:event="oninput"
               @onkeypress="@(async (e) => { if (e.Key == "Enter") { await HandleLoginAsync(); }})" />
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">
            @errorMessage
        </div>
    }

    <div class="d-flex flex-stack flex-wrap gap-3 fs-base fw-semibold mb-8">
        <div></div>
        <a href="/reset-password" class="link-primary">
            Forgot Password ?
        </a>
    </div>

    <div class="d-grid mb-10">
        <button @onclick="@HandleLoginAsync" @onclick:preventDefault type="button" class="btn btn-primary">
            <_ButtonIndicator ButtonLabel="Sign In"></_ButtonIndicator>
        </button>
    </div>
</form>

@code {
    private LoginRequest loginRequest = new LoginRequest();
    private string errorMessage;

    private async Task HandleLoginAsync()
    {
        try
        {
            Console.WriteLine("HandleLoginAsync called"); // Debug log
            errorMessage = null;

            if (string.IsNullOrEmpty(loginRequest.Username) || string.IsNullOrEmpty(loginRequest.Password))
            {
                errorMessage = "Please enter both email and password.";
                StateHasChanged();
                return;
            }

            Console.WriteLine($"Attempting login with username: {loginRequest.Username}"); // Debug log
            var result = await AuthService.LoginAsync(loginRequest.Username, loginRequest.Password);

            if (result)
            {
                Console.WriteLine("Login successful, navigating..."); // Debug log
                NavigationManager.NavigateTo("/Dashboards/default");
            }
            else
            {
                Console.WriteLine("Login failed"); // Debug log
                errorMessage = "Login failed. Please check your credentials.";
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Login error: {ex}"); // Debug log completo
            errorMessage = "An error occurred during login. Please try again.";
            StateHasChanged();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await Task.Delay(1000);
                await JS.InvokeVoidAsync("KTSigninGeneral.init");
                // Aggiungiamo un handler JavaScript per il form submit
                await JS.InvokeVoidAsync("eval", @"
                    document.getElementById('kt_sign_in_form').addEventListener('submit', function(e) {
                        e.preventDefault();
                        console.log('Form submitted via JS');
                    });
                ");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error in OnAfterRenderAsync: {ex}");
            }
        }
    }
}